#ifndef NANOC_MODULE_STDIO_H
#define NANOC_MODULE_STDIO_H
#include <nanoc/defs.h>
// This header file for module nanoc.std.stdio autogenerated by NanoC metadata.
// submodule: nanoc.std.stdio.common
#define EOF -1
#define O_RDWR 2
#define O_WRONLY 1
#define O_CREAT 64
#define O_APPEND 1024
#define O_TRUNC 512
#define O_RONLY 0
#define STDIN_FILENO 0
#define STDOUT_FILENO 1
#define STDERR_FILENO 2
#define F_DUPFD 0
int open(char* pathname, int flags, int mode);
int close(int fd);
ulong write(int fd, char* buf, ulong count);
ulong read(int fd, char* buf, ulong count);
int puts(char* str);
int putchar(int octet);
int getchar();
// submodule nanoc.std.stdio.common end
// submodule: nanoc.std.stdio.format
// submodule: nanoc.std.stdio.format.print
// template: snprintf(T...)(char* buffer, size_t size, const char* format, T args) snprintf;
// template: printf(T...)(const char* format, T args) printf;
// template: fprintf(T...)(FILE* stream, const char* format, T args) fprintf;
// submodule nanoc.std.stdio.format.print end
// submodule: nanoc.std.stdio.format.utils
// submodule nanoc.std.stdio.format.utils end
// submodule nanoc.std.stdio.format end
// submodule: nanoc.std.stdio.file
typedef struct {} FILE;
typedef long fpos_t;
extern FILE* stdin;
extern FILE* stdout;
extern FILE* stderr;
int fclose(FILE* f);
int fputc(int c, FILE* stream);
ulong fwrite(void* ptr, ulong size, ulong nitems, FILE* stream);
ulong fread(void* ptr, ulong size, ulong nitems, FILE* stream);
int fputs(char* s, FILE* stream);
int fgetc(FILE* stream);
int remove(char* pathname);
long ftell(FILE* stream);
#define SEEK_CUR 1
#define SEEK_END 2
#define SEEK_SET 0
int fseek(FILE* stream, long offset, int whence);
int ferror(FILE* stream);
void clearerr(FILE* stream);
void rewind(FILE* stream);
int feof(FILE* stream);
// submodule nanoc.std.stdio.file end
#endif
